import heapq
class Node:
    def _init_(self, name, g=0, h=0):
        self.name = name
        self.g = g
        self.h = h
        self.f = g + h
        self.parent = None

    def _lt_(self, other):
        return self.f < other.f

def a_star(graph, start, goal, heuristic):
    open_list = []
    heapq.heappush(open_list, Node(start, 0, heuristic[start]))
    closed_list = set()
    all_nodes = {}

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.name == goal:
            path = []
            cost = current_node.g
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1], cost

        closed_list.add(current_node.name)

        for neighbor, cost in graph[current_node.name].items():
            if neighbor in closed_list:
                continue
            g_cost = current_node.g + cost
            h_cost = heuristic[neighbor]
            neighbor_node = Node(neighbor, g_cost, h_cost)
            neighbor_node.parent = current_node
            heapq.heappush(open_list, neighbor_node)

    return None, None

# Graph and heuristic values
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'D': 2, 'E': 5},
    'C': {'A': 4, 'F': 1},
    'D': {'B': 2, 'G': 1},
    'E': {'B': 5, 'G': 3},
    'F': {'C': 1, 'G': 3},
    'G': {}
}

heuristic = {
    'A': 6,
    'B': 4,
    'C': 4,
    'D': 3,
    'E': 2,
    'F': 1,
    'G': 0
}

# Running A* algorithm
path, cost = a_star(graph, 'A', 'G', heuristic)
print("Path found:", path)
print("Total cost:", cost)

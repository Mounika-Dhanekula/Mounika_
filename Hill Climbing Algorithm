import random

# Objective function
def objfun(x):
    return x ** 2 + 2 * x

# Generate a neighboring state
def get_neighbor(x, step_size=0.1):
    return x + random.uniform(-step_size, step_size)

# Hill Climbing algorithm
def hill_climbing(initial_state, max_iterations=100, step_size=0.1):
    current_state = initial_state
    current_value = objfun(current_state)

    for _ in range(max_iterations):
        neighbor = get_neighbor(current_state, step_size)
        neighbor_value = objfun(neighbor)

        if neighbor_value > current_value:
            current_state = neighbor
            current_value = neighbor_value
        else:
            break

    return current_state, current_value

# Initialize and run
initial_state = random.uniform(0, 5)
optimal_state, optimal_value = hill_climbing(initial_state)

print(f"Best path (optimal state): {optimal_state:.3f}")
print(f"Final objective value: {optimal_value:.3f}")
